// Package Nsmm provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version (devel) DO NOT EDIT.
package Nsmm

import (
	"fmt"
	"net/http"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/gin-gonic/gin"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Delete of resources using slice-id
	// (DELETE /net-resources)
	DeleteNetResources(c *gin.Context, params DeleteNetResourcesParams)
	// Retrieval of all the set of network resources
	// (GET /net-resources)
	GetNetResources(c *gin.Context, params GetNetResourcesParams)
	// Creation of network-resources for a new slice
	// (POST /net-resources)
	PostNetResources(c *gin.Context)
	// Removal of a set of network resources using the ID
	// (DELETE /net-resources/{id})
	DeleteNetResourcesId(c *gin.Context, id int)
	// Retrieval of a set of network resources using ID
	// (GET /net-resources/{id})
	GetNetResourcesId(c *gin.Context, id int)
	// Delete of the gateway configuration
	// (DELETE /net-resources/{id}/gateway/config)
	DeleteNetResourcesIdGatewayConfig(c *gin.Context, id int)
	// Retrieval of the current configuration of the gateway
	// (GET /net-resources/{id}/gateway/config)
	GetNetResourcesIdGatewayConfig(c *gin.Context, id int)
	// Configuration of the gateway
	// (PUT /net-resources/{id}/gateway/config)
	PutNetResourcesIdGatewayConfig(c *gin.Context, id int)
	// Retrieve all the active VPN connection of the gateway
	// (GET /net-resources/{id}/gateway/connections)
	GetNetResourcesIdGatewayConnections(c *gin.Context, id int)
	// Creation of a new VPN connection
	// (POST /net-resources/{id}/gateway/connections)
	PostNetResourcesIdGatewayConnections(c *gin.Context, id int)
	// Removal of a VPN connection
	// (DELETE /net-resources/{id}/gateway/connections/{cid})
	DeleteNetResourcesIdGatewayConnectionsCid(c *gin.Context, id int, cid int)
	// Retrieval of the information of a VPN connection
	// (GET /net-resources/{id}/gateway/connections/{cid})
	GetNetResourcesIdGatewayConnectionsCid(c *gin.Context, id int, cid int)
	// Delete of external IP (floating) of the GW
	// (DELETE /net-resources/{id}/gateway/external-ip)
	DeleteNetResourcesIdGatewayExternalIp(c *gin.Context, id int)
	// Retrival of Gateway external IP
	// (GET /net-resources/{id}/gateway/external-ip)
	GetNetResourcesIdGatewayExternalIp(c *gin.Context, id int)
	// Request to allocate and associate a external IP (floating) for the GW
	// (PUT /net-resources/{id}/gateway/external-ip)
	PutNetResourcesIdGatewayExternalIp(c *gin.Context, id int)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
}

type MiddlewareFunc func(c *gin.Context)

// DeleteNetResources operation middleware
func (siw *ServerInterfaceWrapper) DeleteNetResources(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params DeleteNetResourcesParams

	// ------------- Required query parameter "slice-id" -------------
	if paramValue := c.Query("slice-id"); paramValue != "" {

	} else {
		c.JSON(http.StatusBadRequest, gin.H{"msg": "Query argument slice-id is required, but not found"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "slice-id", c.Request.URL.Query(), &params.SliceId)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter slice-id: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.DeleteNetResources(c, params)
}

// GetNetResources operation middleware
func (siw *ServerInterfaceWrapper) GetNetResources(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetNetResourcesParams

	// ------------- Optional query parameter "slice-id" -------------
	if paramValue := c.Query("slice-id"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "slice-id", c.Request.URL.Query(), &params.SliceId)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter slice-id: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetNetResources(c, params)
}

// PostNetResources operation middleware
func (siw *ServerInterfaceWrapper) PostNetResources(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.PostNetResources(c)
}

// DeleteNetResourcesId operation middleware
func (siw *ServerInterfaceWrapper) DeleteNetResourcesId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameter("simple", false, "id", c.Param("id"), &id)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter id: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.DeleteNetResourcesId(c, id)
}

// GetNetResourcesId operation middleware
func (siw *ServerInterfaceWrapper) GetNetResourcesId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameter("simple", false, "id", c.Param("id"), &id)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter id: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetNetResourcesId(c, id)
}

// DeleteNetResourcesIdGatewayConfig operation middleware
func (siw *ServerInterfaceWrapper) DeleteNetResourcesIdGatewayConfig(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameter("simple", false, "id", c.Param("id"), &id)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter id: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.DeleteNetResourcesIdGatewayConfig(c, id)
}

// GetNetResourcesIdGatewayConfig operation middleware
func (siw *ServerInterfaceWrapper) GetNetResourcesIdGatewayConfig(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameter("simple", false, "id", c.Param("id"), &id)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter id: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetNetResourcesIdGatewayConfig(c, id)
}

// PutNetResourcesIdGatewayConfig operation middleware
func (siw *ServerInterfaceWrapper) PutNetResourcesIdGatewayConfig(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameter("simple", false, "id", c.Param("id"), &id)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter id: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.PutNetResourcesIdGatewayConfig(c, id)
}

// GetNetResourcesIdGatewayConnections operation middleware
func (siw *ServerInterfaceWrapper) GetNetResourcesIdGatewayConnections(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameter("simple", false, "id", c.Param("id"), &id)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter id: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetNetResourcesIdGatewayConnections(c, id)
}

// PostNetResourcesIdGatewayConnections operation middleware
func (siw *ServerInterfaceWrapper) PostNetResourcesIdGatewayConnections(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameter("simple", false, "id", c.Param("id"), &id)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter id: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.PostNetResourcesIdGatewayConnections(c, id)
}

// DeleteNetResourcesIdGatewayConnectionsCid operation middleware
func (siw *ServerInterfaceWrapper) DeleteNetResourcesIdGatewayConnectionsCid(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameter("simple", false, "id", c.Param("id"), &id)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter id: %s", err)})
		return
	}

	// ------------- Path parameter "cid" -------------
	var cid int

	err = runtime.BindStyledParameter("simple", false, "cid", c.Param("cid"), &cid)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter cid: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.DeleteNetResourcesIdGatewayConnectionsCid(c, id, cid)
}

// GetNetResourcesIdGatewayConnectionsCid operation middleware
func (siw *ServerInterfaceWrapper) GetNetResourcesIdGatewayConnectionsCid(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameter("simple", false, "id", c.Param("id"), &id)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter id: %s", err)})
		return
	}

	// ------------- Path parameter "cid" -------------
	var cid int

	err = runtime.BindStyledParameter("simple", false, "cid", c.Param("cid"), &cid)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter cid: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetNetResourcesIdGatewayConnectionsCid(c, id, cid)
}

// DeleteNetResourcesIdGatewayExternalIp operation middleware
func (siw *ServerInterfaceWrapper) DeleteNetResourcesIdGatewayExternalIp(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameter("simple", false, "id", c.Param("id"), &id)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter id: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.DeleteNetResourcesIdGatewayExternalIp(c, id)
}

// GetNetResourcesIdGatewayExternalIp operation middleware
func (siw *ServerInterfaceWrapper) GetNetResourcesIdGatewayExternalIp(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameter("simple", false, "id", c.Param("id"), &id)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter id: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetNetResourcesIdGatewayExternalIp(c, id)
}

// PutNetResourcesIdGatewayExternalIp operation middleware
func (siw *ServerInterfaceWrapper) PutNetResourcesIdGatewayExternalIp(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameter("simple", false, "id", c.Param("id"), &id)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter id: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.PutNetResourcesIdGatewayExternalIp(c, id)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL     string
	Middlewares []MiddlewareFunc
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router *gin.Engine, si ServerInterface) *gin.Engine {
	return RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router *gin.Engine, si ServerInterface, options GinServerOptions) *gin.Engine {
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
	}

	router.DELETE(options.BaseURL+"/net-resources", wrapper.DeleteNetResources)

	router.GET(options.BaseURL+"/net-resources", wrapper.GetNetResources)

	router.POST(options.BaseURL+"/net-resources", wrapper.PostNetResources)

	router.DELETE(options.BaseURL+"/net-resources/:id", wrapper.DeleteNetResourcesId)

	router.GET(options.BaseURL+"/net-resources/:id", wrapper.GetNetResourcesId)

	router.DELETE(options.BaseURL+"/net-resources/:id/gateway/config", wrapper.DeleteNetResourcesIdGatewayConfig)

	router.GET(options.BaseURL+"/net-resources/:id/gateway/config", wrapper.GetNetResourcesIdGatewayConfig)

	router.PUT(options.BaseURL+"/net-resources/:id/gateway/config", wrapper.PutNetResourcesIdGatewayConfig)

	router.GET(options.BaseURL+"/net-resources/:id/gateway/connections", wrapper.GetNetResourcesIdGatewayConnections)

	router.POST(options.BaseURL+"/net-resources/:id/gateway/connections", wrapper.PostNetResourcesIdGatewayConnections)

	router.DELETE(options.BaseURL+"/net-resources/:id/gateway/connections/:cid", wrapper.DeleteNetResourcesIdGatewayConnectionsCid)

	router.GET(options.BaseURL+"/net-resources/:id/gateway/connections/:cid", wrapper.GetNetResourcesIdGatewayConnectionsCid)

	router.DELETE(options.BaseURL+"/net-resources/:id/gateway/external-ip", wrapper.DeleteNetResourcesIdGatewayExternalIp)

	router.GET(options.BaseURL+"/net-resources/:id/gateway/external-ip", wrapper.GetNetResourcesIdGatewayExternalIp)

	router.PUT(options.BaseURL+"/net-resources/:id/gateway/external-ip", wrapper.PutNetResourcesIdGatewayExternalIp)

	return router
}


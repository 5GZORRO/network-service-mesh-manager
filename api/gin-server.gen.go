// Package NsmmApi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version (devel) DO NOT EDIT.
package NsmmApi

import (
	"fmt"
	"net/http"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/gin-gonic/gin"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /gateways)
	GetGateways(c *gin.Context, params GetGatewaysParams)

	// (POST /gateways)
	PostGateways(c *gin.Context)

	// (DELETE /gateways/{id})
	DeleteGatewaysId(c *gin.Context, id int)

	// (GET /gateways/{id})
	GetGatewaysId(c *gin.Context, id int)

	// (DELETE /gateways/{id}/configuration)
	DeleteGatewaysIdConfiguration(c *gin.Context, id int)

	// (GET /gateways/{id}/configuration)
	GetGatewaysIdConfiguration(c *gin.Context, id int)

	// (PUT /gateways/{id}/configuration)
	PutGatewaysIdConfiguration(c *gin.Context, id int)

	// (GET /gateways/{id}/vpn/connections)
	GetGatewaysIdVpnConnections(c *gin.Context, id int)

	// (POST /gateways/{id}/vpn/connections)
	PostGatewaysIdVpnConnections(c *gin.Context, id int)

	// (DELETE /gateways/{id}/vpn/connections/{connectionid}/)
	DeleteGatewaysIdVpnConnectionsConnectionid(c *gin.Context, id int, connectionid int)

	// (GET /gateways/{id}/vpn/connections/{connectionid}/)
	GetGatewaysIdVpnConnectionsConnectionid(c *gin.Context, id int, connectionid int)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
}

type MiddlewareFunc func(c *gin.Context)

// GetGateways operation middleware
func (siw *ServerInterfaceWrapper) GetGateways(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetGatewaysParams

	// ------------- Optional query parameter "sliceId" -------------
	if paramValue := c.Query("sliceId"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "sliceId", c.Request.URL.Query(), &params.SliceId)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter sliceId: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetGateways(c, params)
}

// PostGateways operation middleware
func (siw *ServerInterfaceWrapper) PostGateways(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.PostGateways(c)
}

// DeleteGatewaysId operation middleware
func (siw *ServerInterfaceWrapper) DeleteGatewaysId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameter("simple", false, "id", c.Param("id"), &id)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter id: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.DeleteGatewaysId(c, id)
}

// GetGatewaysId operation middleware
func (siw *ServerInterfaceWrapper) GetGatewaysId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameter("simple", false, "id", c.Param("id"), &id)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter id: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetGatewaysId(c, id)
}

// DeleteGatewaysIdConfiguration operation middleware
func (siw *ServerInterfaceWrapper) DeleteGatewaysIdConfiguration(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameter("simple", false, "id", c.Param("id"), &id)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter id: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.DeleteGatewaysIdConfiguration(c, id)
}

// GetGatewaysIdConfiguration operation middleware
func (siw *ServerInterfaceWrapper) GetGatewaysIdConfiguration(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameter("simple", false, "id", c.Param("id"), &id)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter id: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetGatewaysIdConfiguration(c, id)
}

// PutGatewaysIdConfiguration operation middleware
func (siw *ServerInterfaceWrapper) PutGatewaysIdConfiguration(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameter("simple", false, "id", c.Param("id"), &id)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter id: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.PutGatewaysIdConfiguration(c, id)
}

// GetGatewaysIdVpnConnections operation middleware
func (siw *ServerInterfaceWrapper) GetGatewaysIdVpnConnections(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameter("simple", false, "id", c.Param("id"), &id)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter id: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetGatewaysIdVpnConnections(c, id)
}

// PostGatewaysIdVpnConnections operation middleware
func (siw *ServerInterfaceWrapper) PostGatewaysIdVpnConnections(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameter("simple", false, "id", c.Param("id"), &id)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter id: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.PostGatewaysIdVpnConnections(c, id)
}

// DeleteGatewaysIdVpnConnectionsConnectionid operation middleware
func (siw *ServerInterfaceWrapper) DeleteGatewaysIdVpnConnectionsConnectionid(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameter("simple", false, "id", c.Param("id"), &id)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter id: %s", err)})
		return
	}

	// ------------- Path parameter "connectionid" -------------
	var connectionid int

	err = runtime.BindStyledParameter("simple", false, "connectionid", c.Param("connectionid"), &connectionid)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter connectionid: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.DeleteGatewaysIdVpnConnectionsConnectionid(c, id, connectionid)
}

// GetGatewaysIdVpnConnectionsConnectionid operation middleware
func (siw *ServerInterfaceWrapper) GetGatewaysIdVpnConnectionsConnectionid(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameter("simple", false, "id", c.Param("id"), &id)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter id: %s", err)})
		return
	}

	// ------------- Path parameter "connectionid" -------------
	var connectionid int

	err = runtime.BindStyledParameter("simple", false, "connectionid", c.Param("connectionid"), &connectionid)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter connectionid: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetGatewaysIdVpnConnectionsConnectionid(c, id, connectionid)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL     string
	Middlewares []MiddlewareFunc
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router *gin.Engine, si ServerInterface) *gin.Engine {
	return RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router *gin.Engine, si ServerInterface, options GinServerOptions) *gin.Engine {
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
	}

	router.GET(options.BaseURL+"/gateways", wrapper.GetGateways)

	router.POST(options.BaseURL+"/gateways", wrapper.PostGateways)

	router.DELETE(options.BaseURL+"/gateways/:id", wrapper.DeleteGatewaysId)

	router.GET(options.BaseURL+"/gateways/:id", wrapper.GetGatewaysId)

	router.DELETE(options.BaseURL+"/gateways/:id/configuration", wrapper.DeleteGatewaysIdConfiguration)

	router.GET(options.BaseURL+"/gateways/:id/configuration", wrapper.GetGatewaysIdConfiguration)

	router.PUT(options.BaseURL+"/gateways/:id/configuration", wrapper.PutGatewaysIdConfiguration)

	router.GET(options.BaseURL+"/gateways/:id/vpn/connections", wrapper.GetGatewaysIdVpnConnections)

	router.POST(options.BaseURL+"/gateways/:id/vpn/connections", wrapper.PostGatewaysIdVpnConnections)

	router.DELETE(options.BaseURL+"/gateways/:id/vpn/connections/:connectionid/", wrapper.DeleteGatewaysIdVpnConnectionsConnectionid)

	router.GET(options.BaseURL+"/gateways/:id/vpn/connections/:connectionid/", wrapper.GetGatewaysIdVpnConnectionsConnectionid)

	return router
}


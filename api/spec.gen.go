// Package Nsmm provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version (devel) DO NOT EDIT.
package Nsmm

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"2C9E6H93N3f/DQAA//91Mugjj1MAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}


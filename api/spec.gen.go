// Package Nsmm provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version (devel) DO NOT EDIT.
package Nsmm

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"X5LoFyIkvnef7v4vAAD//+KlXMfMXQAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}


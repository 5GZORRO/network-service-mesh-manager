// Package Nsmm provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version (devel) DO NOT EDIT.
package Nsmm

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}


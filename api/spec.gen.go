// Package Nsmm provides primitives to interact with the openapi HTTP API.
//
// Code generated by  version  DO NOT EDIT.
package Nsmm

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}


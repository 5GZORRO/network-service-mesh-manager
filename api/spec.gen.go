// Package Nsmm provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version (devel) DO NOT EDIT.
package Nsmm

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}


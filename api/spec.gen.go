// Package Nsmm provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version (devel) DO NOT EDIT.
package Nsmm

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"IULie3t5+98AAAD//8cGrOw3XQAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}


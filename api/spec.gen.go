// Package Nsmm provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version (devel) DO NOT EDIT.
package Nsmm

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"/hcAAP//v1TFnfFUAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}


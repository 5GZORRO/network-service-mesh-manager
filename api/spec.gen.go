// Package Nsmm provides primitives to interact with the openapi HTTP API.
//
// Code generated by  version  DO NOT EDIT.
package Nsmm

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"Woyw0z5a0S9ESHxvPt78NwAA///HIe/yelwAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}


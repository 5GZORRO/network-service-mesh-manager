// Package Nsmm provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version (devel) DO NOT EDIT.
package Nsmm

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}


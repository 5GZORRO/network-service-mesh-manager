// Package Nsmm provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version (devel) DO NOT EDIT.
package Nsmm

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xc3XLbOLJ+FRTPuUiqKNn5mTlzfJdEmZQq60QVezNVO8kFTLYsTCiAAUAp2pTffQt/",
	"JAiCFOU48mRn7myRBBqN7q+/7gb5NcnYumQUqBTJ2ddEZCtYY/3nC0YpZJIwqv6DL3hdFqD+JHly9kua",
	"lAB8Al9KJiCfiOqKghri90SwNSAJX2SSen9/TBMOayZhop8jZXLWutO/WDIuW5dv0qTkrAQuCQgnwtck",
	"B5FxUhoRk39S8rkCRHKgkiwJcMSWSK4AZfVCJiRP0kTuSkjOEkIlXAPXg0eXEk5wYS4geyO62unh1cNJ",
	"mhAJa/2QHV5ITui1Gt3+gDnHO/V/qIdwnkV1VZAMzRduAeYBPRF6v3iDmjU0k3T1Fw77LhhF39UZSQ/1",
	"uSIccrWZWmGBwJHJelT4MU0kkcpqkneMSXS5KwEtGUeebdUSsKs/INN7/ZJzxt+BKBkVEBgfqGvJWdK1",
	"CXvl654Vmdt6JWvPHRHuFZawxbuufp9lssIFujbXldUtyXXFsbqsdhJrrQvgG+DuriRtre0AZ/oEuwUm",
	"er0z5Q2tO0tONljC5BPswivatiIXJFmDkHhdho63vl7LrrvqXzt+2sy8KemEY3oNw3480ueQZNbrfIUl",
	"j/7v8fTx0+np9PTk8dODXBC+SOAUF1H/e2n9e75I0XZFshUiQvvhrwXDktBrNF/EXNDbkv/lsEzOkv85",
	"adD1xELryWt7m6/bUARrZOj9OVpjiq9hDVT2TOttxbhhrMc2evzl9JfTDzQ2dmQ7O2hlbjHGrXervUen",
	"09Nmh/a4ZmANjYL8VcakapTf3tteN39V+1+fg88XIfL4NjNs1IPGZS/OFwgLwTKCJeTKwJWFRWBBafDJ",
	"6fTn6ZNHIxTYXnq4tNeNhbaleg07pK4gQpeMrw1mcciAbCBHS87WWrz57EN1evr450Ubt74vALWVO4uF",
	"/tl8hobMV88WgQVfmBhqNCKFM17Wl/btyUyHUF+S1rz+LL3W+ro27s6WvgG5ZfxTYKvU/DqheL0Hgdt3",
	"hsu0oyN1FYkSMkWsckSoNoc3F7OY1o37TjKS8/4RcZ5zEAJVCmnVGuWKiAZAhnXaEro9Ya8OnaIiOlww",
	"Idtsty3zc5bvHBdbvL24VN6acVCohxGFrca+hmXq6bDz5SmaS3VRYkJNGPF9LMLwHpTVlTKNFJEy1WD9",
	"EGGa6/vswkU8IH69U07eMZVbs+SG99w3Tw7sqENsD2Oxgd30WFYvYXzRZYiOPLZ3NUbBOrtzB1wi0I4b",
	"8TZBVC38TwdNQyhyW9y4wOUPvkC1gr7FFSSDdyBYxTOI+HoIhkXhoxTi7klj3EKNhhhFGG3IOkx9sqLK",
	"wfpcQA0c6iVnvw+qd+jixzRREEQymOAsAyEmJSO66PFtY6o1TTr8Z0PWI/Y/XHSo3n9gIW1INHGyXXHo",
	"AGijp44tKRuyKFnHkB6bqgF6KInx/TsC3T2q7sSKZ4tvlkKZb0yCemPCSed5oAlnmFuqcruoAaeKq5Nr",
	"2uyBdo3oLjR7P7QL7+fnaLsCDp7/mBj2uQKhUoJ68rF+rm6MK95ThydfLEPowtnSJr2TXj9Ik4FLLTI4",
	"5Aw98wyiotWle9TtW9o1KmVpEd7Vw2B/SFIcV2B6K7LcExO68SAoC///T2PResgybvfYIMJ/Nyv+fkP3",
	"RxchsazErULOQYVzAVL9GQ3n+roSL1pQP2Ikuv8odHAE6iq8ji7DocVtfGcF+vcmDeoNHPcRneoZW1HI",
	"LiU1HYa9EawfqdqQ1AEtJY0C/sh6GZer56yiOZpTCXyJM71+B8YXRhB0DmKFznXmxPWUP73619t3796i",
	"kjM1xxRdans5P1e/bEgOAj1bzJXmTL5ldKX9hjrtCmVnjOfAdSovJL4qiFghAVnFAREqOZ7kbI0J9SoL",
	"Al2B3AJQZLUkpmhOUQ4Sk0KcfaATRbON1wLNje5SlOGigNy528RjNcTGmkbWiLNTCwYFZGrnN2St7rdr",
	"RZgiV3ZEekI1uRN5Q+QObYlctbsfD7aEw3WFef5Qa09AVzg1hiA5KJtCb0ugFxJnnxAWaqj5OSJUk+ez",
	"DxShSQMlmOY2YApzhbNKAjcXiNtngSTbYp4jHCEPkqlMhm1N81AZv2UMUdM0s3S6PV41V2XeVlofXlxz",
	"oTYabRpWSSSDPbu5KenEswy9lzkoGPF20w0ZMyGvWiKmH+gHWpuxeVi0bQAjQeh1AchapdanVLMSumGf",
	"GmasnbyJIQpV7CNjMsUrWDIObXpuHZFQITGVROt4ip4tpfKeYI8iD6aBnEoMu13g79MU/UooLopdaord",
	"FxfnDvBcfb5ZG+BsVa8rkAE7N85WmFIomi7SknFldk3BX+tbrrC0mhGRLat3TF2SW+bk1WhnQZGKtcqo",
	"N8CFQbdH09PpqQJ8VgLFJUnOkifT0+njJE1KLFc6iJwo4sHb6X0BMhIb5hKZS2I4ya911A2onyvgO1Ri",
	"jtcggU8TLZpxmLliODM9wRuQPprX9xsa9+2ZnIo46lktjoo8ljI1kamJXZJXkNojEbHGsq6fmk6x1t7j",
	"09NY293pR8UOI6BGRDclKrFQGIyFr6OpVXiu9vDp6RM1cMaoBKoLBbgsC5Jp5Z38IUzRuhF0iK20G9w6",
	"Pt6RwBmmlEl0BW3Rnx5P9Am6tfBK8qUiAwp2VYirf1Cr+Mns7HFWoW9AecWdESuk3uBChyBF7SN8QrMu",
	"Ua3XmO9qX1IPNO5ZKfxGnqFLfC38MmHjIx87Ml2qRNQFoQjoe+DoITg2RyIGgTyNhgUVYDHf9dORDVn7",
	"3EdjfIapG8nxgVTHKd6yCkvsJs9MGF/ouIoeXDxbiIeOzM2QWLGqyF3nBjFqigh+Ha6O729+9RmRZhmO",
	"vLlI4BGiqe61X8cqfnOJOEhOYDOItGaReYeaKV6km0/2Sb0jAjFuW1Il5pJkrMDONYxNROC5g86vQN4/",
	"NB8MxaMddlyi1841Ojlf15XNflac7omb6mKzWfHb/C2smi0ky9j+OWZ/dAh26tHEtY28OQOhYRW+ECE9",
	"WA10Rm02cWGSBT1lgG/vjJMYTKytvadcsRfqSibivug4mVE9ha3Vef9edmjPFcttC9gHp22QsMQSi2bU",
	"Lley5XffHS1Tfc7y3Z3tdqQHdNNO7xVFuun43qM7kyA2e3Ds7rC9QCu8AXSl6HTGOIdMFjuHp3qfnL+a",
	"Tr01xfksclhnVHksNU6g/i+IkJ0aTT238dSj0wyrGpfnKBUdnXG+iWJdjRu44IDznYEN4SFae5T3ZB3Z",
	"JLewXvA5zhIvat5mNr2mykEo71K5F15i2S2SBMi0B+pu0iDnO/lK8pu7SPzagUn3K1WcJ1I0TlSZsqf2",
	"Jf2AXDUBy/gJq6RzW8sSGiswz5jb8xHZ49wkc/vysxc1Cng0u3+tnoXVjt0AzXx2j+laTLT5zLc1TDMo",
	"7iUvezOkSOuq8xnKWeOjP0oixjPosJPGkPqjRMO957NvysZ0sVIfCXO5w4nx2agJa4FyWBJqAiN2caqR",
	"p9rTEPKZ1bekMcfDjQOzm17oOBKniaQNjdY4FC0W0gGfIzr2ZbQnpDdSe/O9xtw6kbBdB9ibSOxz1hGO",
	"OpgV93Zaw7G0II66mBjv4rtOkZUPNBnyuLJl3Z69+RjnASe2nnFiquN7aIGVToTAqIvhFedAZfxdGFNi",
	"ERJKlaRisaNZioQx5hrTnPmT9RpyFSWK3XRUzLdnEs3ZylEE4FX0hZ0mObivOqyTSxfbTN1JMFvmsgGd",
	"gwCZIkXjdVFO/bwD2bQ37iPUD6ZGmpgoYwvAQQV7v6RWu0jTVnL1BP1072LvlyAQSiTBBfl3cLpbCV9y",
	"prL73kqtv/yWLR5IDl46H5IMKbW6SOxXZAfblc1hTfV4tFXm3ZO2OtmuBhopeza9a13oMqIpxcTHHeYW",
	"dYruoAarWWB4YVHuPmipTb/A5slt8iH2E4kxeHQnxuoOYw/TCV9l+4ygp6ri/HCPbv6qyPONxcyxG/Tf",
	"QUTSpKzkfnoxAq6CzCSyjfNZ3FANH2lPoYgJNdzE4Xabo/SRFISR8/BI1bbaCw7fp4bbwobjFW+HIak3",
	"sDRHC49dEr0MKqHO2RsyaE4Q64Jd+2VJzMG/9d7YolftqdFJg1VNEl059W+SeG9VJGNhbNnD94IC8O2j",
	"wP48z50Ki7yo3EcjXUXCMq7weJn/Hpt5zp6g6hySirw5aY8KekfTRtDA/QLtN5pW7NBSzGfeUZGA2hzA",
	"+moFH6NB7b2MeLvmdKC7v4Hh6PUp9ECh88mWEwlo9jxFILPpdPowzhn3eGM/WgSnR38oxtjXrT8IaZb2",
	"nMX3hIWwS9+LC9+H9floYJnfdyJ67Zn2pJ+R17CCvbE90aNzqDuBkB8BL++fA4VHttsWMNACjznzIK6N",
	"50AnX7P93XBd6QaTHo6AXN9iOhZl5jusqu2EfUHGtbdD17r3svYLT5g/Q2fanOiK+0ybYYQ8VW/fj9Hk",
	"8vrRB7jOQZVlBeuxGYYzAv/MRZ9Hjeoy+3WzSISJjpyiKygYvdagxOJum2q/7XjtneYG/b58/Ogc6N5T",
	"5V8qGXCDjPP54XJuYI4HuuAgK+89qdGZIsK9s0PJd/qD9rM7H2Qb19TW9+naHs1RDhPXPvJgpX7zsfkI",
	"UZNrjQ7r7ptw83JUSPc+Q9iK57goWBYQ554n/Ray4jN5irac0WskJJbQe8RyggYOfHS9sJ6ufUns75YM",
	"BLOmYeor/4F7jfOh24dXv+1tkfRHFc8KbMcUvO/2xd4Bab38Fms+jA4Me63hLmvz88WImNBv5eiBb4zu",
	"LfaHiCxtsbkmRXdhT5feOSgXF1pIL7pnutFVJZUs9Wj6/Lf/0rInuAoCh7XyPtAY+lvwdzV5b6q/VNvO",
	"ApKD0AA//T0gZUjAIlG7eZlvPpui0d21IX96dBx/ciI0MDUh5UO0H7BfNpErOAaPGG/7gjkmhH0cVzq9",
	"gs6xh7bi78I5DwP0iM/UL1k7lbQMBhDuA3tXxhuB9s18fh7jJyOevWqeVn8aIGKnr35D781RfTtr55sc",
	"wYv7rW8s7H29sfVKX/xTEXjPxyKa18a3LHwFUzTO31VWl+cNrMUIO+6jFf1ChMT35uPNfwIAAP//vvPS",
	"zZpeAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}


// Package Nsmm provides primitives to interact with the openapi HTTP API.
//
// Code generated by  version  DO NOT EDIT.
package Nsmm

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xcW3PbuJL+KyjuPiRVlOxcZnfWb0mcpFS1dlR2TqbqjPMAky0JEwpgANCKTsr//RRu",
	"JAiCFOU4cnIyb7ZI4tKXr7/uBvk1ydi6ZBSoFMnJ10RkK1hj/ecrRilkkjCq/oMveF0WoP4keXLye5qU",
	"AHwCX0omIJ+I6pqCGuLPRLA1IAlfZJJ6f39MEw5rJmGinyNlctK6079YMi5bl2/TpOSsBC4JCLeEr0kO",
	"IuOkNEtM/kHJ5woQyYFKsiDAEVsguQKU1RuZkDxJE7ktITlJCJWwBK4Hj24lnODSXED2RnS91cOrh5M0",
	"IRLW+iE7vJCc0KUa3f6AOcdb9X8oh3CeeXVdkAzN5m4D5gE9EfowP0fNHppJuvILh70IRtF3dUbSQ32u",
	"CIdcKVMLLFhwZLIeEX5ME0mksprkgjGJ3m9LQAvGkWdb9QrY9V+QaV2/5pzxCxAlowIC4wN1LTlJujZh",
	"r3zdsSNzW+/K2nNHFvcWS9jgbVe+LzJZ4QItzXVldQuyrDhWl5UmsZa6AH4D3N2VpK297eFM8EUCp7jo",
	"etJ6uZY9v3YcS8mQ3GAJk5uSTjimSxh2vJFOgiSzbuLvMHnyv0+nT59Pj6fHR0+f7+Uzre2Gc762Djmb",
	"p2izItkKEaEd503BsCR0iWbzmM/UkgoHtDpGH87QGlO8hDVQOTRI3OPiw1iHaaTy+/Hvx1c0NnZEOR2w",
	"MLcY29Kyb0v8eHrcyHuHZwS6bQTk7zK2qrZ+en3rbW30fV41m4fu3mPmEcMcNBB7cTZHWAiWESwhV0aq",
	"rCTii0puz46n/zN99mSE2NpbD7d2DnLD+KdgY9T8OqF4vcPl2neGW7OjI3UViRIyFfpyRKje2vnlacyu",
	"jIYnGcl5/4g4zzkIgSrlWkp9ckVEY2PDQmktuj1hr3k4QUVkOGdCtvlIe80vWb510XL+7vK9Um3GQTkG",
	"RhQ22j0aHqCnw07xUzST6qLEhBrcIHTB+LpG7jAGPyqr68kn2KaIlKn258cI01zfZzcu4gj49V5ZU8dU",
	"7sxjmsj00EwmsKMO9diPZwR202NZvSH9VTeGu/De1mos5na0s3e4SRHjoOWmcMu642YFXMM9xpcqzllZ",
	"7JSkm/0u6KyE9MPB2BDi3BVjLnH5k29Q7aBvcwXJ4AIEq3gGEVwIgbMofERD3D1pHEGo0RCjCKMbsg6J",
	"bFZUOVj/DBinQ8jk5M9B8Q5d/JgmCq5IBhOcZSDEpGREp7DfNqbak0oS2yu+IesR+g83HYr3/7GQNnya",
	"mNrOHztg28ipY0vKhiyi1vGmx6ZqMP9vDovkJPmvoybhP7LZ/pHv3xGY7xF1J668mH/zKpT5xlZQKyac",
	"dJYHknCGuaGK+EcNOFUkkCxpowPtGlEtNLof0sKH2ZkF5sZ/TLz7XIFQXLOefKyfqxvjgvfE4a3v4yiv",
	"f0O+QG5R7kG8f7mZ9Keuy43OMbrO9pCoEdDlsbMNPPY30vQizS/q5yP9uUtPFrbCMRmwwztZdmByPfMM",
	"shwrM/eo00/aNSAVOSI5V0/2+lMmxHEBpndKlHs4XpffBUX7Z/83Fke/D+b1Yu93s+LvN3Q/hguJJckm",
	"Qvmq5BWYXypxJ6jfq9EhQKo/oyFbX1cLjjZADhgBHp5n7s0xuwKv48pwUPFNoVuyYgVgigjNSWYAksga",
	"Det6iVGhVi0RaKHoG2Lcxp4c5YTiNclwUXiJ+7UZ2q2gislQ/x5OI36MyFjP2IqMdiup6UmNYcmN9Puh",
	"tI2ZHVRVS1ORKbJ5xuXqJatojmZUAl/gTAvDRYtLsyp0BmKFznRZh+spf3v7z3cXF+9QyZmaY4rea/M9",
	"O1O/3JAcBHoxnykxmmKQEZx2Y+pELZTZM54D13VGIfF1QcQKCcgqDohQyfEkZ2tMqFf2FOga5AaAIisy",
	"MUUzinKQmBTi5IpOFLM3IAI0N4JMkbIuyJ33Tzx6RWwwbNYawR5qsamATJnBDVmr++1eEabI5QNIT6gm",
	"d0u+IXKLNkSu2s2zRxvCYVlhnj/W0hPQXZwaQ5AclIGhdyXQS4mzTwgLNdTsDBGqOfTJFUVo0iAbprmN",
	"6MJc4aySwM0F4vQskGQbzHOEI+xGMpU8sY3pPStPsJQmaqdmlk6z0OtLoA/1an20c62u2mi0aVghkQx2",
	"aPOmpBPPMrQuc1Co5mnTDRkzIa+UK6ZX9IrWZmweFm0bwEgQuiwAWavU8tSYRugN+9RQdO3xTUhTEGMf",
	"GZOcXsPC1UzrPME6IqFCYiqJlvEUvVhI5T2BjiIPpsE61TKsusDX0xS9IVQBcWpKtpeXZw79XKep2Rvg",
	"bFXvK1gDdm6crTClUDQ9zQXjyuya1pWWt1xhaSUjIiqrNaYuyQ1z69VoZ0GRirVK4m+AC4NuT6bH02OF",
	"/qwEikuSnCTPpsfTp0malFiudEQ5UsyIt+uJBchIoJhJZC6J4bpCLaNufP9cAd+iEnO8Bgl8muilGYeZ",
	"KQp2qic4B+mjeX2/4ZnfnlKq8KOe1ctRYcgyuCZMNYHMkj/NOmLnEnRzxxw00NJ7enwcO7Xh5KNih1mg",
	"RkQ3JSqxUBiMhS+jqRV4rnT4/PiZGjhjVALV9QJcloVmHYwe/SVMR61Z6BB5ap+P0PHxnhacYUqZRNfQ",
	"Xvrzwy19gu68eLXyhSIDCnZViKt/ULv4zWj2MLvQN6C84s6IFVLf4EKHIJVpRPiEpmCiWq8x39a+pB5o",
	"3LNS+I08Q5d4Kfy+ROMjHztreq8yZReEIqDvgaOH4NicqBkE8jQaFlSAxXzbT0duyNrnPhrjM0zdSI4P",
	"pDpO8ZZVWGI3eWHC+FzHVfTo8sVcPHZk7hSJFauK3LWVEaOG1/vluDq+n7/xGZFmGY68uUjgEaKpPiuy",
	"jBX+ZhJxkJzAzSDSuuQhpGaKF+nOuH1Sa0SodMP0y0vMJclYgZ1rGJuIwHMHnd+CfHho3huKRzvsuLyz",
	"nWt0UtCuKxt9VpzuiJvqYqOs+G2+CqtGhWQR059j9geH4As/4W0jb85AaFiFL0RID1YDmVGbTVyaZEFP",
	"GeDbhXESg4m1tfdUT3ZCXclE3BcdJzOip7CxMu/XZYf2XLPcnk/xwWkTJCyxxKIZtcuVbBXed0fLVF+y",
	"fHtv2o40nW/bub6iSLcd33tybyuIzR6c2txPF2iFbwBdKzqdMc4hk8XW4anWk/NXc4zImuLsNHLsbFS1",
	"LjVOoP4viJCdgk09t/HUg9MMKxqX5ygRHZxxnkexrsYNXHDA+dbAhvAQrT3KB7KOKMltrBd8DrPFy5q3",
	"GaXXVDkI5V0q98pLLLtFkgCZdkDdbRrkfEdDBc4fk/Nd0ZD1WZBmtNh6vK9uSwllFdUaGkNyMlfQ6/gc",
	"RvPzN/UhQP23QBi9mc2vqOZrLkgMA/Gllqfp7xwGkesDAT8cMp+7ENcB2ivqod3+qPQDoUcPdbF1Tv2q",
	"gtrsLo9uHLntNbZ0arwUvf1jJ5VpZnntHFeNHIwrLDNzw6ZIVNnKWPz8/I2ORQFQfCX57X1UiNoMVp9v",
	"MJ0T0UTbyrRrdNDVD8hVw2xNQGWVdPHdphONws0z5vZ8RJlpZqo+uwo5r2or9vLx/r16xlQzgIaRzE4f",
	"sK4TW9rs1A9KmGZQPEgB53xIkNYrZ6coZ407/iwVG55BJ41pDKmfTjZJ+uz0m8o2uquhD7a7IsOR8dmo",
	"CesF5bAg1DBo7Ahts55qRyPbT8G+pd5xONzYswzSCx0HCrGR+kIjNQ5FK13pgM8BHft9tJOsFam9+UHJ",
	"eTRsD1YcdjnrCEcdLJ/1nhAJx9ILcSzFcAiXCOhamvKBppQ2rr9RHyu5/RjnAUe28Hlk2mg7aIFdnQiB",
	"UXfNKs6Byvg7l6YWKySUhsRvaZYiYYy5xjRn/mS9hlxFiWI7HRXz7dsS5g2RUQTgbfTF0IbcPlTDxq1L",
	"Z2gmoRHM1sNtQOcgQKZIMWudyamftyCbPuhDhPrBGoomJsrYAnBQwd6vvdcu0vSfXeFRP9272YclCIQS",
	"SXBB/hW8o6YWX3KmUuHelo6//ZYt7kkO6gxBMqTE6iKxn8YPnmtoDpKrx6M9de+etHXkxTVLIv2R5pCL",
	"roibpSnBxMcd5hZ1Lc9BDVazwPDGotx90FKbxqJNXdvkQ+wmEmPw6F6M1b0mNkwnfJHtMoKe8qvzwx2y",
	"+VWR5xu7HmMV9J9BRNKkrORuejECroLMJKLG2WncUA0faU+hiAk13MThdpuj9JEUhJHz8Eh7p9oJDt+n",
	"tNjChsPVEochqTewNEeiD907eR8UJ52zN2TQvAshzWFf/9UIzMG/9cHYolftqdFJg1VNEuty+d8k8aGq",
	"SMbC2KKH7wV15btHgd15njs+GqnY99FIV5GwjCs8h+q/jW+es0ctO6cpI99/sIVx7wzrCBq4e0G7jaYV",
	"O/QqZqfembKA2uzB+moBH+Iki/dJhbudYglk9zcwHLw+hR4pdD7acCIBnb5MEchsOp0+jnPGHd7YjxbB",
	"MfOfijH2HevZC2kW9kDW94SFsIvciwvfh/X5aGCZ33cieu2ZdqSfkRdKA93YdvLBOdS9QMjPgJcPz4HC",
	"dzvaFjDQWY858yCujedAR1+z3d1wXekGkx6OgFzfYjoWZebbr6rtFvuKjGtvh6714GXtV95ifoTOtDn6",
	"GfeZNsMIeapW38/R5PL60Xu4zl6VZQXrsRmGMwL/zEWfR43qMvt1s0iEiY6comsoGF1qUGJxt02133a8",
	"9l5zg35fPnx0DmTvifKXSgbcION8fricG5jjni44yMp7T2p0pohw72xf8p3+pP3szjdIxzW19X26tkdz",
	"lMPEtY88WKlfkW4+pdjkWqPDuvsM6qwcFdK9r+e24jkuCpYFxLnnSb+FrPhMnqINZ3Spzw5C72nKCRo4",
	"8NH1wnq69iWx30HL3oapL/xH7n3vx04PI05V9kcVzwpsxxS8T9XGXhZrvSUbaz6MDgw7reE+a/Oz+YiY",
	"0G/l6JFvjO7rG48RWdhic02K7sOe3odf3ghLe5Ezyei6kmot9Wj6RRH/6wbewlUQ2K+V1zkFrNHfgr+r",
	"yXtT/VJtOwtIDkID/PR1QMqQgEWidvPW7+x0ikZ314b86clh/MktoYGpCSkfo92A/bqJXMGJd8R45ys0",
	"+jSnh+NKptfQOfbQFvx9OOc3npy/aL7G4ETSMhhAuA/sXRnvbmfo9ZHZJhnx7FXztPobIhE7ffsH+mDe",
	"6bGzdr7kE3zho/Uxlp3vxLTe/Y1/Uwbv+KpM832JDeu8KdA4f1dYXZ43sBez2HFft+lfREh8bz/e/jsA",
	"AP//EgYhYAJlAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}


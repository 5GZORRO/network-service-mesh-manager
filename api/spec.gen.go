// Package Nsmm provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version (devel) DO NOT EDIT.
package Nsmm

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"5fGmn3BcAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}


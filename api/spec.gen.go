// Package Nsmm provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version (devel) DO NOT EDIT.
package Nsmm

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"sBcj7LRfCPQLEeLveH/8XwAAAP//23KtDeVEAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}


// Package Nsmm provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version (devel) DO NOT EDIT.
package Nsmm

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"39313f8CAAD//5/iLB2iVwAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}


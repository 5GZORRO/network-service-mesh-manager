// Package Nsmm provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version (devel) DO NOT EDIT.
package Nsmm

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}


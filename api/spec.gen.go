// Package Nsmm provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version (devel) DO NOT EDIT.
package Nsmm

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"//+qErAm6GkAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}


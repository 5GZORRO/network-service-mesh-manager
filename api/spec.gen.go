// Package Nsmm provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version (devel) DO NOT EDIT.
package Nsmm

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}


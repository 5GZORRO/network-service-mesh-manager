// Package Nsmm provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version (devel) DO NOT EDIT.
package Nsmm

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}


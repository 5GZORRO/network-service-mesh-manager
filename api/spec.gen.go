// Package Nsmm provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version (devel) DO NOT EDIT.
package Nsmm

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"2S9E6H/3N/f/CwAA//9z4UWNSVcAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}


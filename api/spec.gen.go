// Package Nsmm provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version (devel) DO NOT EDIT.
package Nsmm

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}


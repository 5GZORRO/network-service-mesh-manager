// Package Nsmm provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version (devel) DO NOT EDIT.
package Nsmm

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"i1F23LeV/UqE8Xd/c/+/AAAA//9uE2F5zlgAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}

